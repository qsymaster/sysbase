<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false 
	scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 
	scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 
-->
<configuration debug="false" scan="false" scanPeriod="30 seconds">
	<!-- 上下文名称 -->
	<contextName>qsy</contextName>

	<!-- 
		ConsoleAppender：把日志添加到控制台，有以下子节点：
		<encoder>：对日志进行格式化。（具体参数稍后讲解 ）
		<target>：字符串 System.out或者 System.err，默认 System.out
	-->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<!-- encoder 默认配置为PatternLayoutEncoder -->
		<encoder>
			<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level - %msg%n</pattern>
		</encoder>
	</appender>
	
	<!-- 
		RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。
		<file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
		<append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
		<encoder>：对记录事件进行格式化。
		<rollingPolicy>:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。
		<triggeringPolicy >: 告知 RollingFileAppender 合适激活滚动。
		<prudent>：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。
	 -->
	<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 每天产生一个日志文件 -->  
			<fileNamePattern>/data/qsy/log/logFile.%d{yyyy-MM-dd}.log</fileNamePattern>
			<!-- 只保存30天日志文件 -->   
			<maxHistory>30</maxHistory>    
		</rollingPolicy>
	    <encoder>
	      <pattern>%-4relative [%thread] %-5level - %msg%n</pattern>
	    </encoder>
	</appender>

	<root level="debug">
		<appender-ref ref="STDOUT"/>
		<appender-ref ref="FILE"/>
	</root>
</configuration>